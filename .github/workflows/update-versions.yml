---
name: update versions

on:
  push:
    paths:
      - '.github/workflows/update-versions.yml'
  schedule:
    - cron: '0 2 * * SAT'

jobs:
  versions-update:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        role:
          - name: peco
            repo: peco/peco
            type: normal
          - name: bat
            repo: sharkdp/bat
            type: normal
          - name: docker_compose
            repo: docker/compose
            type: beta-rc
          - name: docker
            repo: docker/docker-ce
            type: beta-rc
          - name: embulk
            repo: embulk/embulk
            type: prefix
          - name: git
            repo: git/git
            type: from-tag
          - name: vim
            repo: vim/vim
            type: from-tag
          - name: jo
            repo: jpmens/jo
            type: prefix
          - name: jq
            repo: stedolan/jq
            type: prefix
          - name: q
            repo: harelba/q
            type: from-tag
          - name: terraform
            repo: hashicorp/terraform
            type: from-tag
          - name: zsh
            repo: zsh-users/zsh
            type: from-tag
          - name: tmux
            repo: tmux/tmux
            type: prefix
    steps:
      - uses: actions/checkout@master
      - name: install jq
        run: |
          sudo apt update
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          sudo python get-pip.py
          sudo apt install -y jq
      - name: install yq
        run: |
          sudo add-apt-repository ppa:rmescandon/yq
          sudo apt install -y yq

      - id: check
        name: check require update
        run: |
          got=`yq r ./ansible/versions_vars.yml ${{ matrix.role.name }}_version`
          latest=`./.github/workflows/bin/latest-version-${{ matrix.role.type }}.sh ${{ matrix.role.repo }}`

          echo ::set-output name=got::$got
          echo ::set-output name=latest::$latest

          if [[ "$got" != "$latest" ]]; then
            echo "found ahead versions"
            yq w -i ./ansible/versions_vars.yml ${{ matrix.role.name }}_version $latest
            branch="versionup/${{ matrix.role.name }}-to-$latest"
            echo ::set-output name=branch::$branch
          fi

      - if: steps.check.outputs.branch
        id: exist_branch
        name: check exist branch
        run: |
          git fetch
          count=`git branch -a | grep ${{ steps.check.outputs.branch }} | wc -l`
          echo ::set-output name=count::$count

      # 既存ブランチがない場合は以後の処理を行う
      - if: steps.check.outputs.branch && steps.exist_branch.outputs.count == 0
        name: push to branch
        run: |
          git config --global user.email ${{ secrets.GITHUB_EMAIL }}
          git config --global user.name ${{ secrets.GITHUB_USERNAME }}
          git checkout -b ${{ steps.check.outputs.branch }}
          git add ./ansible/versions_vars.yml
          git commit -m "[versionup] ${{ matrix.role.name }} ${{ steps.check.outputs.got }} to ${{ steps.check.outputs.latest }}"
          git push https://${GITHUB_USER_NAME}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ steps.check.outputs.branch }}

      - if: steps.check.outputs.branch && steps.exist_branch.outputs.count == 0
        name: create pull request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_PERSONAL_TOKEN }}
          REPO_ID: ${{ secrets.REPO_ID }}
        run: |
          ./.github/workflows/bin/create_pr.sh ${{ steps.check.outputs.branch }}

      # - if: steps.check.outputs.branch && steps.exist_branch.outputs.count == 0
      #   name: dispatch ci
      #   run: |
      #     curl -X POST -H "Authorization: token ${{ secrets.GITHUB_PERSONAL_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" --data '{"event_type": "ansible", "client_payload": {"ref": "${{ steps.check.outputs.branch }}"}}' https://api.github.com/repos/${{ github.repository }}/dispatches
