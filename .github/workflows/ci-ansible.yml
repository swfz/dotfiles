---
name: ansible

on:
  push:
    paths:
      - 'ansible/**'
      - '.github/workflows/ci-ansible.yml'
  repository_dispatch:
    types: [ansible]
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 0 * * SAT'

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    name: 'playbook ubuntu'
    strategy:
      matrix:
        tag: [deploy, init, tool, all]
    steps:
      - uses: actions/checkout@v3.0.0
      - if: github.event.client_payload
        uses: actions/checkout@v3.0.0
        with:
          ref: ${{ github.event.client_payload.ref }}
      - name: install ansible
        run: |
          sudo apt update
          sudo apt-get install python3-setuptools
          python3 -m pip install ansible pexpect --user
      - name: run ansible
        env:
          CI: true
        run: |
          cd ansible
          ansible-playbook -i localhost, -c local ubuntu.yml --extra-vars user=runner --tags "${{ matrix.tag }}"

  build-mac:
    runs-on: macos-latest
    name: 'playbook mac'
    steps:
      - uses: actions/checkout@v3.0.0
      - if: github.event.client_payload
        uses: actions/checkout@v3.0.0
        with:
          ref: ${{ github.event.client_payload.ref }}
      - name: install ansible
        run: |
          brew install ansible
      - name: run ansible
        env:
          CI: true
        run: |
          cd ansible
          ansible-playbook -i localhost, -c local mac.yml

  build-centos:
    runs-on: ubuntu-latest
    name: 'playbook centos'
    strategy:
      matrix:
        tag: [deploy, init, tool, all]
    steps:
      - uses: actions/checkout@v3.0.0
      - if: github.event.client_payload
        uses: actions/checkout@v3.0.0
        with:
          ref: ${{ github.event.client_payload.ref }}
      - name: 'ansible playbook centos'
        env:
          CI: true
        run: |
          docker-compose run centos ansible-playbook -i localhost, -c local centos.yml --tags "${{ matrix.tag }}"

  build-codespace:
    runs-on: ubuntu-latest
    name: 'playbook codespace'
    steps:
      - uses: actions/checkout@v3.0.0
      - if: github.event.client_payload
        uses: actions/checkout@v3.0.0
        with:
          ref: ${{ github.event.client_payload.ref }}
      - name: 'ansible playbook codespace'
        env:
          CI: true
        run: |
          docker-compose build codespace
          docker-compose run codespace sh setup.sh

  lint:
    runs-on: ubuntu-latest
    name: 'lint'
    steps:
      - uses: actions/checkout@v3.0.0
      - run: cat $GITHUB_EVENT_PATH
      - if: github.event.client_payload
        uses: actions/checkout@v3.0.0
        with:
          ref: ${{ github.event.client_payload.ref }}
      - name: install ansible-lint yamllint
        run: |
          sudo apt update
          sudo apt-get install python3-setuptools
          python3 -m pip install ansible ansible-lint yamllint --user
      - name: run yamllint
        env:
          CI: true
        run: |
          cd ansible
          ~/.local/bin/yamllint .
      - name: run ansible-lint
        env:
          CI: true
        run: |
          cd ansible
          ~/.local/bin/ansible-lint --version
          ~/.local/bin/ansible-lint centos.yml mac.yml ubuntu.yml

  slack-notify:
    if: always()
    needs: [lint, build-centos, build-mac, build-ubuntu]
    name: post slack
    runs-on: ubuntu-latest
    steps:
      - uses: Gamesight/slack-workflow-status@v1.0.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
