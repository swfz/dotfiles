plenv_version(){
  VERSION=''
  if [ -n "$PLENV_ROOT" ]; then
    if [ -r .perl-version ]; then
      VERSION=`cat .perl-version`
    else
      VERSION=`plenv version | awk -F" " '{print \$1}'`
    fi
  else
    VERSION="system"
  fi

  if [ "$VERSION" = "system" ]; then
    VERSION=`perl -v | grep 'This is perl' | awk -F" " '{print \$4}'`
  fi
  echo "pl[$VERSION]"
}

rbenv_version(){
  if [ -n "$RBENV_ROOT" ]; then
    VERSION=''
    NOTFOUND=''
    if [ -r .ruby-version ]; then
      VERSION=`cat .ruby-version`
      ls "$RBENV_ROOT/versions/" | egrep "^$VERSION$" >/dev/null 2>&1 || NOTFOUND='{?}'
    else
      if [ -r $RBENV_ROOT/version ]; then
        VERSION=`cat "$RBENV_ROOT/version"`
      else
        VERSION='?'
      fi
    fi
   echo "rb[$VERSION]$NOTFOUND"
  fi
}

ndenv_version(){
  if [ -n "$NDENV_ROOT" ]; then
    VERSION=''
    NOTFOUND=''
    if [ -r .node-version ]; then
      VERSION=`cat .node-version`
      ls "$NDENV_ROOT/versions/" | egrep "^$VERSION$" >/dev/null 2>&1 || NOTFOUND='{?}'
    else
      if [ -r $NDENV_ROOT/version ]; then
        VERSION=`cat "$NDENV_ROOT/version"`
      else
        VERSION='?'
      fi
    fi
   echo "nd[$VERSION]$NOTFOUND"
  fi
}

nodenv_version(){
  if [ -n "$NODENV_ROOT" ]; then
    VERSION=''
    NOTFOUND=''
    if [ -r .node-version ]; then
      VERSION=`cat .node-version`
      ls "$NODENV_ROOT/versions/" | egrep "^$VERSION$" >/dev/null 2>&1 || NOTFOUND='{?}'
    else
      if [ -r $NODENV_ROOT/version ]; then
        VERSION=`cat "$NODENV_ROOT/version"`
      else
        VERSION='?'
      fi
    fi
   echo "nd[$VERSION]$NOTFOUND"
  fi
}

pyenv_version(){
  if [ -n "$PYENV_ROOT" ]; then
    VERSION=''
    NOTFOUND=''
    if [ -r .python-version ]; then
      VERSION=`cat .python-version`
      ls "$PYENV_ROOT/versions/" | egrep "^$VERSION$" >/dev/null 2>&1 || NOTFOUND='{?}'
    else
      if [ -r $PYENV_ROOT/version ]; then
        VERSION=`cat "$PYENV_ROOT/version"`
      else
        VERSION='?'
      fi
    fi
   echo "py[$VERSION]$NOTFOUND"
  fi
}
