- name: install anyenv
  git: repo="{{ anyenv.url }}" dest=~/.anyenv

- name: store anyenv profile to zshenv
  lineinfile:
    dest: ~/.zshenv
    state: present
    create: yes
    line: "{{ item }}"
  with_items:
    - 'export PATH="$HOME/.anyenv/bin:$PATH"'
    - 'eval "$(anyenv init - zsh)"'

- name: check init
  stat:
    path: "{{ ansible_env.HOME }}/.config/anyenv/anyenv-install"
  register: anyenv_install_dir

- name: init
  expect:
    command: "{{ ansible_env.HOME }}/.anyenv/libexec/anyenv install --init"
    responses:
      '.*Do you want to checkout.*': y
  when: not anyenv_install_dir.stat.exists

- name: "exist envs"
  shell: "{{ execute }} 'which {{ item.key }}'"
  register: exist_envs
  changed_when: false
  ignore_errors: true
  with_dict: "{{ envs }}"

- name: "install envs"
  shell: "{{ execute }} 'anyenv install {{ item.0 }}'"
  when: item.1.rc != 0
  with_together:
    - "{{ envs }}"
    - "{{ exist_envs.results }}"

- name: "store envs path to zshenv"
  lineinfile:
    dest: ~/.zshenv
    state: present
    create: yes
    line: 'export PATH="$HOME/.anyenv/envs/{{ item.key }}/shims:$PATH"'
  with_dict: "{{ envs }}"

- name: "nodenv default packages"
  copy:
    src: nodenv-default-packages
    dest: "$HOME/.anyenv/envs/nodenv/default-packages"

- name: "exist version in every envs"
  shell: "{{ execute }} '{{ item.key }} versions | grep {{ item.value.version }}'"
  register: exist_version
  changed_when: false
  ignore_errors: true
  with_dict: "{{ envs }}"

- name: "install envs version"
  shell: "{{ execute }} '{{ item.0 }} install {{ envs[item.0].version }}'"
  when: item.1.rc != 0
  with_together:
    - "{{ envs }}"
    - "{{ exist_version.results }}"

- name: "exist global envs version"
  shell: "{{ execute }} '{{ item.key }} global'"
  when: item.key != "goenv"
  register: exist_global
  changed_when: false
  ignore_errors: true
  with_dict: "{{ envs }}"

- name: "set global envs version"
  shell: "{{ execute }} '{{ item.0 }} global {{ envs[item.0].version }}'"
  when: item.1.stdout is defined and item.1.stdout.find(envs[item.0].version) == -1 and item.0 != 'goenv'
  with_together:
    - "{{ envs }}"
    - "{{ exist_global.results }}"


