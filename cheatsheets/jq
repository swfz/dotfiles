# Pretty print the json
jq "." < filename.json

# Access the value at key "foo"
jq '.foo'

# Access first list item
jq '.[0]'

# Slice & Dice
jq '.[2:4]'
jq '.[:3]'
jq '.[-2:]'

# where的な使いかた
jq 'select(.request_time > 20)'

# 配列から Instancesの項目を取得(複数)
jq '.[].Instances'

# 組み合わせ autoscalingのinstance_idを取得
jq '.AutoScalingGroups[]|select(.AutoScalingGroupName == "backends")|.Instances[].InstanceId'

# 日付の比較(複数select)
jq 'select(.time <= "2015-12-18 03:20:00")|select(.time >= "2015-12-18 03:10:00")|'

# 複数取得
jq '.Messages[].Body, .Messages[].Handle'

# 一行出力
jq '-c [.group.unread_count_display, .group.name]'

# 特定の要素が存在するか
jq 'select(has("age"))'

# 特定の要素を含むかチェック
jq 'select(contains({age:20}))'

# 特定の要素をまないかチェック
jq 'select(contains({hoge:"aa"})|not)'

# 複数条件
jq 'select((contains({hoge:"aa"})|not) and (contains({hoge: "bb"})|not))'

# ハッシュの生成
jq '.[]|{a: .foo, b: bar}'

# 特定のキーでソート
jq 'sort_by(.key)'

# 全行をまとめて配列にしてjqに食わせる
jq '.[]|{a: .foo, b: bar}' | paste -s -d ',' | sed -e 's/^/\[/' -e 's/$/\]/' | jq 'sort_by(.b)'

# CSV的な出力
jq -r '.TargetHealthDescriptions[]|select(.TargetHealth.State!="healthy2")|[.Target.Id,.TargetHealth.State]|join(",")'

# 特定のをnullに書き換え（ない場合もある）
jq 'if(has(".next_cursor")) then .next_cursor|=null else . end'

# キーごとに集計
jq 'reduce .[] as $row ({}; .[$row.label] += [$row.value])| . as $tmp| keys | reduce .[] as $key ({}; .[$key] = ($tmp[$key]|add)/($tmp[$key]|length))'

# キーごとの合計
jq 'reduce .[] as $row ({}; .[$row.label] += $row.value)'
