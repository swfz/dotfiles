alias pmversion='perl -le '"'"'for $module (@ARGV) { eval "use $module"; print "$module ", ${"$module\::VERSION"} || "not found" }'"'"

alias str2sha256='perl -MDigest::SHA=sha256_hex -le '\''print sha256_hex($ARGV[0])'\'' '

function colorlist(){
  for c in {000..255}; do echo -n "\e[38;5;${c}m $c" ; [ $(($c%16)) -eq 15 ] && echo;done;echo
}

function mrank() {
  ps alx  | awk '{printf ("%dM\t%s\t%d\n", $8/1024,$13,$3)}' | sort -nr | head -$1
}

function cpurank() {
  ps auxwww | awk '{printf ("%s\t%d\t%s\n", $3,$2,$11)}' | sort -nr | head -$1
}

function memused() {
  free -g | head -n 2 | tail -n 1 | awk '{print $3"/"$2}'
}

function cpus() {
  grep 'cpu' /proc/stat | tail -n +2 | awk '{usage=($2+$4)*100/($2+$4+$5); print""; printf "%.2f", usage}'
}

function cpuused() {
  grep 'cpu' /proc/stat | head -n 1 | awk '{usage=($2+$4)*100/($2+$4+$5); printf "%.2f", usage}'
}

function binlog() {
  mysqlbinlog --start-datetime="$2" --stop-datetime="$3" $1 | perl -e 'while(<>){ chomp; next if m!^#!; if ( m{/\*!\*/;$} ) { $p .= $_; print "$p\n"; $p="" } else { $p .= $_." "} }'
}

function sql.trace(){
 sudo /usr/sbin/tcpdump -i lo -s 0 -l -w - dst port 3306 | strings | perl -nle '
   chomp;
   next if /^[^ ]+[ ]*$/;
   if ( /^(SELECT|UPDATE|DELETE|INSERT|SET|COMMIT|ROLLBACK|CREATE|DROP|ALTER)/i ) {
     print $q if defined $q;
     $q = $_;
   } else {
     $_ =~ s/^[ \t]+//;
     $q .= " $_";
   }'
}

function h2j() {
  echo "$@" | json_xs -f eval
}

function h2y() {
  echo "$@" | json_xs -f eval -t yaml
}

function dates() {
  for i in `seq 0 $2`;do date +"%F" --date "$1 $i days";done
}

function submodule_update() {
  git submodule foreach git pull origin master
}

# comvert between hex dec bin
function tobc(){
  str=`echo $3 | tr "[:lower:]" "[:upper:]"`
  echo "obase=$1;ibase=$2;${str}" | bc
}
function hex2dec(){
  tobc 10 16 $1
}
function hex2bin(){
  result=`tobc 2 16 $1`
  # F -> 1111
  expected_words=`expr "${#1}" \* 4`
  fill=`expr "${expected_words}" - "${#result}"`
  if [ ${fill} -gt 0 ]; then
    result=`for i in $(seq 1 ${fill}); do printf "0"; done`$result
  fi
  echo ${result}
}
function dec2hex(){
  tobc 16 10 $1
}
function dec2bin(){
  tobc 2 10 $1
}
function bin2dec(){
  tobc 10 2 $1
}
function bin2hex(){
  result=`tobc 16 2 $1`
  # 00001111 -> 0F
  expected_words=`expr "${#1}" / 4`
  fill=`expr "${expected_words}" - "${#result}"`
  if [ ${fill} -gt 0 ]; then
    result=`for i in $(seq 1 ${fill}); do printf "0"; done`$result
  fi
  echo ${result}
}

function gdif(){
  git diff --color $@ | diff-so-fancy
}

function bookmarklet(){
  sed -e ':loop;N;$!b loop;s/\n/ /g' -e 's/ \+/%20/g' -e 's/^/javascript:/'
}

# Git log list
function gll(){
  git log --reverse $(git merge-base $(git for-each-ref --format='%(refname:short)' refs/heads | grep --color=no -P 'main|master') $(git branch --show-current))..$(git branch --show-current) --pretty="format:%h %s"
}
