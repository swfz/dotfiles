# peco
function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history

function agvim () {
  vim $(ag $@ | peco --query "$LBUFFER" | awk -F : '{print "-c " $2 " " $1}')
}

function csp () {
  unset CHEATCOLORS
  BUFFER=$( cheat $1 | grep -v '^#' | peco --query "$LBUFFER" )
  print -z "$BUFFER"
  export CHEATCOLORS=true
}

function tvi () {
  vim $( tree --charset=o -f $1 | peco | tr -d '\||`|-' )
}

function aliasp () {
  BUFFER=$(alias | peco --query "$LBUFFER" | awk -F"=" '{print $1}')
  print -z "$BUFFER"
}

# git branchを選択
function peco-git-branch () {
  local current_buffer=$BUFFER
  local selected_branch_name="$(git branch -a | peco | tr -d ' ' | tr -d '*')"
  case "$selected_branch_name" in
    *-\>* )
      selected_branch_name="$(echo ${selected_branch_name} | perl -ne 's/^.*->(.*?)\/(.*)$/\2/;print')";;
    remotes* )
      selected_branch_name="$(echo ${selected_branch_name} | perl -ne 's/^.*?remotes\/(.*?)\/(.*)$/\2/;print')";;
  esac
  if [ -n "$selected_branch_name" ]; then
    BUFFER="${current_buffer}${selected_branch_name}"
  # カーソル位置を末尾に移動
    CURSOR=$#BUFFER
  fi
}
zle -N peco-git-branch
bindkey '^g^b' peco-git-branch

# commit hashを選択
function peco-git-hash () {
  local current_buffer=$BUFFER
  local git_hash="$(git log --oneline --branches | peco | awk '{print $1}')"
  BUFFER="${current_buffer}${git_hash}"
  # カーソル位置を末尾に移動
  CURSOR=$#BUFFER
}
zle -N peco-git-hash
bindkey '^g^h' peco-git-hash

# プロセスIDを取得
function peco-ps () {
  local current_buffer=$BUFFER
  local process_id="$(ps auxf | peco | awk '{print $2}')"
  BUFFER="${current_buffer}${process_id}"
  # カーソル位置を末尾に移動
  CURSOR=$#BUFFER
}
zle -N peco-ps
bindkey '^g^p' peco-ps
